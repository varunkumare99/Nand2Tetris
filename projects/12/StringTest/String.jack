// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length,capacity;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
    
    	if(maxLength < 0)
    	{
    		do Sys.error(14);
    	}
    	if(maxLength > 0)
    	{
    		let str = Array.new(maxLength);
    	}
    	let length = 0;
    	let capacity = maxLength;
    	return this;
    }

    /** Disposes this string. */
    method void dispose() {
    	do Memory.deAlloc(this);
    	return;
    }

    /** Returns the current length of this string. */
    method int length() {
    	return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
    	if(( j > -1) & (j < length))
    	{
    		return str[j];
    	}
    	else
    	{
    		do Sys.error(15);
    		return 0;
    	}
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    	if(( j > -1) & (j < length))
    	{
    		let str[j] = c;
    	}
    	else
    	{
    		do Sys.error(16);
    	}
    	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    	if(length = capacity)
    	{
    		do Sys.error(17);
    	}
    	let str[length] = c;
    	let length = length + 1;
    	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    	if(length = 0)
    	{
    		do Sys.error(18);
    	}
    	let length = length - 1;
    	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
    	var int val,i,d;
    	var boolean sign;
    	let val = 0;
  
    	if(str[0] = 45)
    	{
    		let sign = true; //negative value
    		let i = 1;
    	}
    	else
    	{
    		let sign = false;
    		let i = 0;
    	}
    	while((i<length) & ((str[i] > 47) & (str[i] < 58)))
    	{
    		let d = str[i] - 48;
    		let val = val * 10 + d;
    		let i = i + 1;
    	}
    	if(sign)
    	{
    		return val * -1;
    		
    	}
    	else
    	{
    		return val;
    	}
    	
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
    	var int i;
    	var Array temp;
    	let temp = String.int2String(val);
    	let length = String.calcLength(temp);
    	if(length > capacity)
    	{
    		do Sys.error(19);
    	}
    	else
    	{
    		let str = temp;
    	}
    	return;
    }
    
    function int calcLength(Array str)
    {
    	var int i;
    	
    	if(str[0] = 45) //negative sign
    	{
    		let i = 1;
    	}
    	
    	else
    	{
    		let i = 0;
    	}
    	
    	while((str[i] > 47) & (str[i] < 58))
    	{
    		let i = i + 1;
    	}
    	return i;
    }
    
    function String int2String(int val){
    	var int lastDigit,i,length,temp;
    	var Array numberString;
    	var boolean sign;
    	let numberString = Array.new(7);
    	
    	if(val = 0)
    	{
    		let numberString[0] = 48;
    		return numberString;
    	}
    	
    	else
    	{
    		if(val < 0)
    		{
    			let lastDigit = (val - (10 * (val /10))) * -1;
    			let numberString[0] = 48 + lastDigit;
    			let i = 1;
    			let val = val / 10;
    			let val = val * -1;
    			let sign = true;
    		}
    		
    		else
    		{
    			let lastDigit = val - (10 * (val /10));
    			let numberString[0] = (48 + lastDigit);
    			let i = 1;
    			let val = val / 10;
    		}
    	}
  
    	while(val > 0)
    	{
    		let lastDigit = val - (10 * (val /10));
    		let numberString[i] = 48 + lastDigit;
    		let val = val / 10;
    		let i = i + 1;
    	}
    	
    	let length = i/2;
    	
    	if(sign) //add negative sign at end
    	{
    		let numberString[i] = 45;
    		let i = i + 1;
    	}
    	
    	let numberString = String.reverseArray(numberString,i);
    	return numberString;
    }
    
    /** reverse an Array*/
    function Array reverseArray(Array arr, int length)
    {
    	var int i,j,temp;
    	let i = length;
    	let j = 0;
    	let length = length/2;
    	
    	while(j < length)
    	{
    		let temp = arr[j];
    		let arr[j] = arr[i-1];
    		let arr[i-1] = temp;
    		let i = i - 1;
    		let j = j + 1;
    	}
    	return arr;
    }
   

    /** Returns the new line character. */
    function char newLine() {
    	return 128; //ascii value of newline
    }

    /** Returns the backspace character. */
    function char backSpace() {
    	return 129; //ascii value of backspace
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    	return 34; //ascii value of (")
    }
}
