// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
    	return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
 	return Memory.peek(24576);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
    	var char currentKeyPressed,key;
    	let key = 0;
    	//display cursor
    	do Output.printChar(0);
    	while(key = 0)
    	{
    		let key = Keyboard.keyPressed();
    	}
    	
    	let currentKeyPressed = key;
    	
    	while(~(key = 0))
    	{
    		let key = Keyboard.keyPressed();
    	}
    	
    	do Output.printChar(currentKeyPressed);
    	return currentKeyPressed;
    	
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
    	var char currentChar;
    	var String input;
    	let input = String.new(100);
    	do Output.printString(message);
    	while(true)
    	{
    		let currentChar = Keyboard.readChar();
    	
    		if(currentChar = 128)
    		{
    			do Output.printChar(currentChar);
    			return input;
    		}
    		
    	       if(currentChar = 129)
    		{       
    			do input.eraseLastChar();
    			do Output.backSpace();
    		}
    		
    		else
    		{
    			let input = input.appendChar(currentChar);
    		}
    	}
    	return input;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
    	var char currentChar;
    	var int result;
    	var boolean isNonDigit,isNegative;
    	let isNonDigit = false;
    	let isNegative = false;
    	let result = 0;
    	do Output.printString(message);
    	
    	//read first character
    	let currentChar = Keyboard.readChar();
    	
    	if(currentChar = 45) //minus sign
    	{
    		let isNegative = true;
    	}
    	
    	if((currentChar > 47) & (currentChar < 58))
    	{
    		let result = (currentChar - 48);
    	}
    	
    	if(currentChar = 128) //newline
    	{
    			return result;
    	}
    	
    	if((~((currentChar > 47) & (currentChar < 58))) & (~(currentChar = 45)))
    	{
    		//non digit
    		let isNonDigit = true;
    	}
    	
    	while(true)
    	{
    		let currentChar = Keyboard.readChar();
    	
    		if(currentChar = 128)
    		{
    			do Output.printChar(currentChar);
    			if(isNegative)
    			{
    				return -result;
    			}
    			return result;
    		}
    		
    	       if((currentChar > 47) & (currentChar < 58) & (~isNonDigit))
    		{           			
    			let result = result * 10 + (currentChar - 48);
    		}
    		
    		else
    		{
    			let isNonDigit = true;
    		}
    	}
    	
    	if(isNegative)
       {
        	return -result;
    	}
    	return result;
    }

}
