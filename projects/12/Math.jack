// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
    	var int i,prod;
    	let i = 0;
    	let twoToThe = Array.new(16);
    	let twoToThe[0] = 1;
    	let i = 1;
    	
    	while(i<16)
    	{
    		let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
    		let i = i + 1;
    	}
    	return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    	if(x < 0)
    	{
    		return -x;
    	}
    	else
    	{
    		return x;
    	}
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    	var int sum, shiftedX,i,numOfBitsInY,bit;
    	let sum = 0;
    	let i = 0;
    	let shiftedX = x;
    	let numOfBitsInY = Math.findLargestPower2(y);
    	let bit = 1;
    	while(i < numOfBitsInY)
    	{
    		if( (y&bit) = bit)
    		{
    			let sum = sum + shiftedX;
    		}
    		let shiftedX = shiftedX + shiftedX;
    		let i = i + 1;
    		let bit = bit + bit;
    	}
    	return sum;
    }
    
    /** Returns true if the ith bit of x is 1, false otherwise
    */
    function boolean isBitOn(int x, int i)
    {
    
    	if((x & twoToThe[i]) = 0)
    	{
    		return false;
    	}
    	else
    	{
    		return true;
    	}
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
   	var boolean isNeg;
    	var int q;
    	
    	if( y = 0)
    	{
    		do Sys.error(3); //attempt to divide by 0
    	}
    	if( (( x < 0) & ( y < 0)) | ((x>0) & (y>0)))
    	{
    		let isNeg = false;
    	}
    	else
    	{
    		let isNeg = true;
    	}
    	
    	let q = Math.dividePositive(x,y);
    	
    	if(isNeg)
    	{
    		return -q;
    	}
    	else
    	{
    		return q;
    	}
    	
    }
    
    function int dividePositive(int x, int y) {
    	var int q,twiceY;
    	let x = Math.abs(x);
    	let y = Math.abs(y);
    	if((y > x) | (y < 0))
    	{
    		return 0;
    	}
    	
    	let twiceY = y + y;
    	let q = Math.dividePositive(x,twiceY);
    	if((x - (q*twiceY)) < y)
    	{
    		return q + q;
    	}
    	else
    	{
    		return q + q + 1;
    	}
    	
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    	var int y,j,yplus2j,n,yplus2jSquare;
    	
    	if( x < 0)
    	{
    		do Sys.error(4); //sqrt of negative numbers not allowed
    	}
    	let y = 0;
    	let n = Math.findLargestPower2(x);
    	let j = n/2;
    	
    	while(j > -1)
    	{
    		let yplus2j = y + twoToThe[j];
    		let yplus2jSquare = yplus2j * yplus2j;
    		if( (yplus2jSquare > 0) & ~(yplus2jSquare > x))
    		{
    			let y = y + twoToThe[j];
    		}
    		let j = j - 1;
    	}
    	return y;
    }
    
    function int findLargestPower2(int x)
    {
    	var int i,j;
    	let i = 15;
    	let j = 0;
    	while((i > -1) & ((x & twoToThe[i]) = 0))
    	{
    		//do Output.printInt(i);
    		//do Output.printIn();
    		let i = i - 1;
    		let j = j + 1;
    	}
    	return i + 1;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    	if(a < b)
    	{
    		return b;
    	}
    	else
    	{
    		return a;
    	}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    	if(a < b)
    	{
    		return a;
    	}
    	else
    	{
    		return b;
    	}
    }
}
